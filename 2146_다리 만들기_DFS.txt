#include <iostream>
#include <queue>
#include <string.h>

using namespace std;

int n, nat, ret = 9999;
int map[101][101];
int visited[101][101];
const int dy[] = {-1, 1, 0, 0};
const int dx[] = {0, 0, -1, 1};

void labeling(int sy, int sx){
    map[sy][sx] = nat;
    visited[sy][sx] = 1;
    
    for(int dir = 0; dir < 4; dir++){
        int ny = sy + dy[dir];
        int nx = sx + dx[dir];
        if(ny < 0 || ny >= n || nx < 0 || nx >= n) continue;
        if(!visited[ny][nx] && map[ny][nx]){
            labeling(ny, nx);
        }
    }
}

void make_bridge(int sy, int sx){
    int cur_nat = map[sy][sx];
    queue<pair<int, int>> q;
    q.push({sy,sx});
    visited[sy][sx] = 1;
    while(!q.empty()){
        int cy = q.front().first;
        int cx = q.front().second;
        q.pop();
        for(int dir = 0; dir < 4; dir++){
            int ny = cy + dy[dir];
            int nx = cx + dx[dir];
            if(ny < 0 || ny >= n || nx < 0 || nx >= n) continue;
            if(!visited[ny][nx] && !map[ny][nx]){
                visited[ny][nx] = visited[cy][cx] + 1;
                q.push({ny, nx});
            }
            else if(map[ny][nx] && map[ny][nx] != cur_nat){
                ret = min(ret, visited[cy][cx]);
                break;
            }
        }
    }
    
}

int main(){
    cin >> n;
    for(int y = 0; y < n; y++){
        for(int x = 0; x < n; x++){
            cin >> map[y][x];
        }
    }
    
    // labeling
    for(int y = 0 ; y < n; y++){
        for(int x = 0; x < n; x++){
            if(!visited[y][x] && map[y][x]){
                ++nat;
                labeling(y, x);
            }
        }
    }
    // 최소길이 다리 찾기
    for(int y = 0; y < n; y++){
        for(int x = 0; x < n; x++){
            if(map[y][x]){
                memset(visited, 0, sizeof(visited));
                make_bridge(y, x);
            }
        }
    }

    // 최소길이 출력
        cout << ret - 1<< endl;
}

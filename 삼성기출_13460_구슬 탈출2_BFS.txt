#include <stdio.h>
#include <queue>
#include <algorithm>

using namespace std;

int n, m, ret = -1;
char map[10][11];
const int dy[] = {-1, 0, 1, 0};
const int dx[] = {0, 1, 0, -1};

typedef struct posi{
    int ry, rx, by, bx, cnt;
} POSI;

POSI start;

int bfs(){
    int visited[10][10][10][10] = {0, };
    queue<POSI> q;
    q.push(start);
    visited[start.ry][start.rx][start.by][start.bx] = 1;
    
    int ret = -1;
    
    while(!q.empty()){
        POSI cur = q.front(); q.pop();
        
        if(cur.cnt > 10){
            break;
        }
        
        if(map[cur.ry][cur.rx] == 'O' && map[cur.by][cur.bx] != 'O'){
            ret = cur.cnt;
            break;
        }
        
        for(int dir = 0; dir < 4; dir++){
            POSI next;
            
            next.ry = cur.ry;
            next.rx = cur.rx;
            next.by = cur.by;
            next.bx = cur.bx;
            while(1){
                if(map[next.ry][next.rx] != '#' && map[next.ry][next.rx] != 'O'){
                    next.ry += dy[dir];
                    next.rx += dx[dir];
                }
                else{
                    if(map[next.ry][next.rx] == '#'){
                        next.ry -= dy[dir];
                        next.rx -= dx[dir];
                    }
                    break;
                }
            }
                
            while(1){
                if(map[next.by][next.bx] != '#' && map[next.by][next.bx] != 'O'){
                    next.by += dy[dir];
                    next.bx += dx[dir];
                }
                else{
                    if(map[next.by][next.bx] == '#'){
                        next.by -= dy[dir];
                        next.bx -= dx[dir];
                    }
                    break;
                }
            }
            
            if(next.ry == next.by && next.rx == next.bx){
                if(map[next.ry][next.rx] != 'O'){
                    int dist_red = abs(next.ry - cur.ry) + abs(next.rx - cur.rx);
                    int dist_blue = abs(next.by - cur.by) + abs(next.bx - cur.bx);
                    if(dist_red > dist_blue){
                        next.ry -= dy[dir];
                        next.rx -= dx[dir];
                    }
                    else{
                        next.by -= dy[dir];
                        next.bx -= dx[dir];
                    }
                }
            }
            
            if(visited[next.ry][next.rx][next.by][next.bx] == 0){
                next.cnt = cur.cnt + 1;
                visited[next.ry][next.rx][next.by][next.bx] = 1;
                q.push(next);
            }
        }
    }
    return ret;
}

int main(){
    scanf("%d %d", &n, &m);
    for(int y = 0; y < n; y++){
        scanf("%s", map[y]);
    }
    
    for(int y = 0; y < n; y++){
        for(int x = 0; x < m; x++){
            if(map[y][x] == 'R'){
                start.ry = y;
                start.rx = x;
            }
            if(map[y][x] == 'B'){
                start.by = y;
                start.bx = x;
            }
        }
    }
    start.cnt = 0;
    
    ret = bfs();
    
    printf("%d\n", ret);
}